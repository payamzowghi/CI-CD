name: Deploy App on S3 bucket

on:
  push:
    branches:
      - 'dev'
  release:
    types: [published]

env:
  AWS_S3_BUCKET: "github-action-crewdle-test"
  CLOUDFRONT_DISTRIBUTION_ID: "E11VL4LC9PJ0OF"
  AWS_REGION: "ca-central-1"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract branch name on push
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

#      - name: Get latest release
#        id: fetch-latest-release
#        uses: thebritican/fetch-latest-release@v2.0.0
#        with:
#          github_token: ${{ github.token }}
#      - name: Get latest Prerelease
#        if: ${{ github.event.action == 'prereleased' }}
#        id: fetch-latest-release
#        uses: cardinalby/git-get-release-action@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          prerelease: true
#
#      - name: Get latest release
#        if: ${{ github.event.action == 'released' }}
#        id: latest_release
#        uses: cardinalby/git-get-release-action@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          latest: true

#      - name: Use Node.js 16.x
#        uses: actions/setup-node@v1
#        with:
#          node-version: 16.15.0
#          registry-url: 'https://npm.pkg.github.com'
#          scope: '@crewdle'

      - name: Latest Release Name
        run: |
          echo "name: ${{ github.event.action }}"
          echo "name: ${{ github.event.release.prerelease }}"
#          echo "name: ${{ steps.latest_release.outputs.name }}"
#          echo "name: ${{ steps.fetch-latest-release.outputs.prerelease }}"

#      - name: Install dependencies and build
#        run: |
#          npm install -g @ionic/cli
#          npm install
#          npm run build-hosting-stg

#      - name: Configure AWS credentials
#        id: configure-aws
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
#          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy to S3 dev
        if: ${{ env.BRANCH_NAME == 'dev'}}
        uses: awact/s3-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
          AWS_S3_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          SOURCE_DIR: ./www

      - name: Deploy to S3 release Pre-Prod
#        if: ${{ contains(steps.latest_release.outputs.name, 'pre-prod') && env.BRANCH_NAME != 'dev'}}
#        if: ${{ steps.fetch-latest-release.outputs.prerelease == 'true' && env.BRANCH_NAME != 'dev'}}
        if: ${{ github.event.action == 'published' && github.event.release.prerelease == 'true'}}
        uses: awact/s3-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
          AWS_S3_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          SOURCE_DIR: ./www

      - name: Deploy to S3 release Production
        if: ${{ github.event.action == 'published' && github.event.release.prerelease == 'false'}}
#        if: ${{ contains(steps.latest_release.outputs.name, 'production') && env.BRANCH_NAME != 'dev'}}
        uses: awact/s3-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
          AWS_S3_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          SOURCE_DIR: ./www

#      - name: Invalidate CloudFront cache
#        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
#        uses: chetan/invalidate-cloudfront-action@v2
#        with:
#          distribution-id: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}
#          paths: '/*'
#
#        env:
#          DISTRIBUTION: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}
#          PATHS: "/*"
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
#          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}